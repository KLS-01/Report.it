// Mocks generated by Mockito 5.3.2 from annotations
// in report_it/test/testing_addDenuncia/addDenunciaControl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:cloud_firestore/cloud_firestore.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:report_it/data/models/denuncia_dao.dart' as _i2;
import 'package:report_it/domain/entity/entity_GA/super_utente.dart' as _i6;
import 'package:report_it/domain/entity/entity_GA/tipo_ufficiale.dart' as _i8;
import 'package:report_it/domain/entity/entity_GD/denuncia_entity.dart' as _i4;
import 'package:report_it/domain/entity/entity_GD/stato_denuncia.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [DenunciaDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockDenunciaDao extends _i1.Mock implements _i2.DenunciaDao {
  MockDenunciaDao() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<String> addDenuncia(_i4.Denuncia? denuncia) => (super.noSuchMethod(
        Invocation.method(
          #addDenuncia,
          [denuncia],
        ),
        returnValue: _i3.Future<String>.value(''),
      ) as _i3.Future<String>);
  @override
  void updateId(String? id) => super.noSuchMethod(
        Invocation.method(
          #updateId,
          [id],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.Stream<_i5.QuerySnapshot<Map<String, dynamic>>>
      generaStreamDenunceByUtente(_i6.SuperUtente? utente) =>
          (super.noSuchMethod(
            Invocation.method(
              #generaStreamDenunceByUtente,
              [utente],
            ),
            returnValue:
                _i3.Stream<_i5.QuerySnapshot<Map<String, dynamic>>>.empty(),
          ) as _i3.Stream<_i5.QuerySnapshot<Map<String, dynamic>>>);
  @override
  _i3.Stream<_i5.QuerySnapshot<Map<String, dynamic>>>
      generaStreamDenunceByStatoAndCap(
    _i7.StatoDenuncia? stato,
    String? cap,
  ) =>
          (super.noSuchMethod(
            Invocation.method(
              #generaStreamDenunceByStatoAndCap,
              [
                stato,
                cap,
              ],
            ),
            returnValue:
                _i3.Stream<_i5.QuerySnapshot<Map<String, dynamic>>>.empty(),
          ) as _i3.Stream<_i5.QuerySnapshot<Map<String, dynamic>>>);
  @override
  _i3.Stream<_i5.DocumentSnapshot<Map<String, dynamic>>>
      generaStreamDenunceById(String? id) => (super.noSuchMethod(
            Invocation.method(
              #generaStreamDenunceById,
              [id],
            ),
            returnValue:
                _i3.Stream<_i5.DocumentSnapshot<Map<String, dynamic>>>.empty(),
          ) as _i3.Stream<_i5.DocumentSnapshot<Map<String, dynamic>>>);
  @override
  _i3.Future<void> updateAttribute(
    String? id,
    String? attribute,
    dynamic value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateAttribute,
          [
            id,
            attribute,
            value,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<_i4.Denuncia?> retrieveById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #retrieveById,
          [id],
        ),
        returnValue: _i3.Future<_i4.Denuncia?>.value(),
      ) as _i3.Future<_i4.Denuncia?>);
  @override
  _i3.Future<List<_i4.Denuncia>> retrieveAll() => (super.noSuchMethod(
        Invocation.method(
          #retrieveAll,
          [],
        ),
        returnValue: _i3.Future<List<_i4.Denuncia>>.value(<_i4.Denuncia>[]),
      ) as _i3.Future<List<_i4.Denuncia>>);
  @override
  _i3.Future<List<_i4.Denuncia>> retrieveByUtente(dynamic idUtente) =>
      (super.noSuchMethod(
        Invocation.method(
          #retrieveByUtente,
          [idUtente],
        ),
        returnValue: _i3.Future<List<_i4.Denuncia>>.value(<_i4.Denuncia>[]),
      ) as _i3.Future<List<_i4.Denuncia>>);
  @override
  _i3.Future<List<_i4.Denuncia>> retrieveByUff(dynamic idUff) =>
      (super.noSuchMethod(
        Invocation.method(
          #retrieveByUff,
          [idUff],
        ),
        returnValue: _i3.Future<List<_i4.Denuncia>>.value(<_i4.Denuncia>[]),
      ) as _i3.Future<List<_i4.Denuncia>>);
  @override
  _i3.Future<List<_i4.Denuncia>> retrieveByStato(_i7.StatoDenuncia? stato) =>
      (super.noSuchMethod(
        Invocation.method(
          #retrieveByStato,
          [stato],
        ),
        returnValue: _i3.Future<List<_i4.Denuncia>>.value(<_i4.Denuncia>[]),
      ) as _i3.Future<List<_i4.Denuncia>>);
  @override
  void accettaDenuncia(
    String? idDenuncia,
    _i5.GeoPoint? coordCaserma,
    String? idUff,
    String? nomeCaserma,
    String? nomeUff,
    String? cognomeUff,
    _i8.TipoUfficiale? tipoUff,
    String? gradoUff,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #accettaDenuncia,
          [
            idDenuncia,
            coordCaserma,
            idUff,
            nomeCaserma,
            nomeUff,
            cognomeUff,
            tipoUff,
            gradoUff,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [DenunciaDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockDenunciaDaoRelaxed extends _i1.Mock implements _i2.DenunciaDao {
  MockDenunciaDaoRelaxed() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<String> addDenuncia(_i4.Denuncia? denuncia) => (super.noSuchMethod(
        Invocation.method(
          #addDenuncia,
          [denuncia],
        ),
        returnValue: _i3.Future<String>.value(''),
      ) as _i3.Future<String>);
  @override
  void updateId(String? id) => super.noSuchMethod(
        Invocation.method(
          #updateId,
          [id],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.Stream<_i5.QuerySnapshot<Map<String, dynamic>>>
      generaStreamDenunceByUtente(_i6.SuperUtente? utente) =>
          (super.noSuchMethod(
            Invocation.method(
              #generaStreamDenunceByUtente,
              [utente],
            ),
            returnValue:
                _i3.Stream<_i5.QuerySnapshot<Map<String, dynamic>>>.empty(),
          ) as _i3.Stream<_i5.QuerySnapshot<Map<String, dynamic>>>);
  @override
  _i3.Stream<_i5.QuerySnapshot<Map<String, dynamic>>>
      generaStreamDenunceByStatoAndCap(
    _i7.StatoDenuncia? stato,
    String? cap,
  ) =>
          (super.noSuchMethod(
            Invocation.method(
              #generaStreamDenunceByStatoAndCap,
              [
                stato,
                cap,
              ],
            ),
            returnValue:
                _i3.Stream<_i5.QuerySnapshot<Map<String, dynamic>>>.empty(),
          ) as _i3.Stream<_i5.QuerySnapshot<Map<String, dynamic>>>);
  @override
  _i3.Stream<_i5.DocumentSnapshot<Map<String, dynamic>>>
      generaStreamDenunceById(String? id) => (super.noSuchMethod(
            Invocation.method(
              #generaStreamDenunceById,
              [id],
            ),
            returnValue:
                _i3.Stream<_i5.DocumentSnapshot<Map<String, dynamic>>>.empty(),
          ) as _i3.Stream<_i5.DocumentSnapshot<Map<String, dynamic>>>);
  @override
  _i3.Future<void> updateAttribute(
    String? id,
    String? attribute,
    dynamic value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateAttribute,
          [
            id,
            attribute,
            value,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<_i4.Denuncia?> retrieveById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #retrieveById,
          [id],
        ),
        returnValue: _i3.Future<_i4.Denuncia?>.value(),
      ) as _i3.Future<_i4.Denuncia?>);
  @override
  _i3.Future<List<_i4.Denuncia>> retrieveAll() => (super.noSuchMethod(
        Invocation.method(
          #retrieveAll,
          [],
        ),
        returnValue: _i3.Future<List<_i4.Denuncia>>.value(<_i4.Denuncia>[]),
      ) as _i3.Future<List<_i4.Denuncia>>);
  @override
  _i3.Future<List<_i4.Denuncia>> retrieveByUtente(dynamic idUtente) =>
      (super.noSuchMethod(
        Invocation.method(
          #retrieveByUtente,
          [idUtente],
        ),
        returnValue: _i3.Future<List<_i4.Denuncia>>.value(<_i4.Denuncia>[]),
      ) as _i3.Future<List<_i4.Denuncia>>);
  @override
  _i3.Future<List<_i4.Denuncia>> retrieveByUff(dynamic idUff) =>
      (super.noSuchMethod(
        Invocation.method(
          #retrieveByUff,
          [idUff],
        ),
        returnValue: _i3.Future<List<_i4.Denuncia>>.value(<_i4.Denuncia>[]),
      ) as _i3.Future<List<_i4.Denuncia>>);
  @override
  _i3.Future<List<_i4.Denuncia>> retrieveByStato(_i7.StatoDenuncia? stato) =>
      (super.noSuchMethod(
        Invocation.method(
          #retrieveByStato,
          [stato],
        ),
        returnValue: _i3.Future<List<_i4.Denuncia>>.value(<_i4.Denuncia>[]),
      ) as _i3.Future<List<_i4.Denuncia>>);
  @override
  void accettaDenuncia(
    String? idDenuncia,
    _i5.GeoPoint? coordCaserma,
    String? idUff,
    String? nomeCaserma,
    String? nomeUff,
    String? cognomeUff,
    _i8.TipoUfficiale? tipoUff,
    String? gradoUff,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #accettaDenuncia,
          [
            idDenuncia,
            coordCaserma,
            idUff,
            nomeCaserma,
            nomeUff,
            cognomeUff,
            tipoUff,
            gradoUff,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
